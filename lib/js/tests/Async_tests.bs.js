// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Async = require("@stroiman/async/lib/js/src/Async.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var MongoDB = require("../src/MongoDB.bs.js");
var Respect_ctx = require("@stroiman/respect/lib/js/src/Respect_ctx.js");
var Respect_dsl = require("@stroiman/respect/lib/js/src/Respect_dsl.js");
var Respect_matcher = require("@stroiman/respect/lib/js/src/Respect_matcher.js");

function asyncResolve(actual, cb) {
  return Curry._1(actual, /* tuple */[
              (function (x) {
                  return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
                }),
              (function (x) {
                  return Curry._1(cb, /* MatchFailure */Block.__(1, [
                                x,
                                x
                              ]));
                })
            ]);
}

function $great$great$eq(x, f) {
  return (function (param) {
      return Async.bind(f, x, param);
    });
}

function $great$great$pipe(x, f) {
  return (function (param) {
      return Async.map(f, x, param);
    });
}

function callbackConverter(x) {
  return (function (param) {
      return Async.from_js(x, param);
    });
}

var AsyncHandler = /* module */[/* callbackConverter */callbackConverter];

var include = MongoDB.Make(AsyncHandler);

var Collection = include[3];

var Db = include[4];

var connect = include[6];

var Mongo_004 = /* Cursor */include[0];

var Mongo_005 = /* InsertResult */include[1];

var Mongo_006 = /* DeleteResult */include[2];

var Mongo_009 = /* MongoDb */include[5];

var Mongo = /* module */[
  /* MongoError */MongoDB.MongoError,
  /* ObjectID */MongoDB.ObjectID,
  /* Make */MongoDB.Make,
  /* AsyncHandler */AsyncHandler,
  Mongo_004,
  Mongo_005,
  Mongo_006,
  /* Collection */Collection,
  /* Db */Db,
  Mongo_009,
  /* connect */connect
];

var connection = Async.once(Curry._1(connect, "mongodb://127.0.0.1:27019/"));

var f = Curry._1(Db[/* collection */0], "foo");

function collection(param) {
  return Async.map(f, connection, param);
}

Respect_dsl.Async[/* register */3](Respect_dsl.Async[/* describe */2]("Mongo", /* :: */[
          Respect_dsl.Async[/* describe */2]("An object has already been inserted", /* :: */[
                Respect_dsl.Async[/* beforeEach */4]((function (ctx, don) {
                        return Async.run(/* None */0, (function (id) {
                                      Respect_ctx.add("id", id, ctx);
                                      return Curry._2(don, /* None */0, /* () */0);
                                    }), (function (param) {
                                      return Async.bind((function (coll) {
                                                    var x = Curry._2(Collection[/* insertOne */0], {
                                                          foo: "bar"
                                                        }, coll);
                                                    return (function (param) {
                                                        return Async.map((function (prim) {
                                                                      return prim.insertedId;
                                                                    }), x, param);
                                                      });
                                                  }), collection, param);
                                    }));
                      })),
                /* :: */[
                  Respect_dsl.Async[/* it */1]("is retrievable", (function (ctx) {
                          var id = Respect_ctx.get("id", ctx);
                          var f = Curry._1(Collection[/* findOne */1], {
                                _id: id
                              });
                          var x = function (param) {
                            return Async.bind(f, collection, param);
                          };
                          var x$1 = function (param) {
                            return Async.map((function (prim) {
                                          if (prim === null) {
                                            return /* None */0;
                                          } else {
                                            return [prim];
                                          }
                                        }), x, param);
                          };
                          var partial_arg = function (param) {
                            return Async.map((function (param) {
                                          if (param) {
                                            return param[0].foo;
                                          } else {
                                            return "";
                                          }
                                        }), x$1, param);
                          };
                          return (function (param) {
                              return Respect_matcher.shoulda((function (param, param$1) {
                                            return Respect_matcher.$great$eq$great(asyncResolve, (function (param) {
                                                          return Respect_matcher.equal("bar", param);
                                                        }), param, param$1);
                                          }), partial_arg, param);
                            });
                        })),
                  /* [] */0
                ]
              ]),
          /* [] */0
        ]));

var Ctx = 0;

exports.Ctx = Ctx;
exports.asyncResolve = asyncResolve;
exports.$great$great$eq = $great$great$eq;
exports.$great$great$pipe = $great$great$pipe;
exports.Mongo = Mongo;
exports.connection = connection;
exports.collection = collection;
/* include Not a pure module */
