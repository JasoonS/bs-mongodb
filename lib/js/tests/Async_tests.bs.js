// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Async           = require("re-sync/lib/js/src/Async.js");
var Block           = require("bs-platform/lib/js/block.js");
var Curry           = require("bs-platform/lib/js/curry.js");
var MongoDB         = require("../src/MongoDB.bs.js");
var Respect         = require("re-respect/lib/js/src/Respect.js");
var Respect_matcher = require("re-respect/lib/js/src/Respect_matcher.js");

function asyncResolve(actual, cb) {
  return Curry._1(actual, /* tuple */[
              (function (x) {
                  return Curry._1(cb, /* MatchSuccess */Block.__(0, [x]));
                }),
              (function (x) {
                  return Curry._1(cb, /* MatchFailure */Block.__(1, [x]));
                })
            ]);
}

function callbackConverter(x) {
  return (function (param) {
      return Async.from_js(x, param);
    });
}

var AsyncHandler = /* module */[/* callbackConverter */callbackConverter];

var include = MongoDB.Make(AsyncHandler);

var Collection = include[3];

var MongoDb = include[4];

var connect = include[5];

var Mongo_004 = /* Cursor */include[0];

var Mongo_005 = /* InsertResult */include[1];

var Mongo_006 = /* DeleteResult */include[2];

var Mongo = /* module */[
  /* MongoError */MongoDB.MongoError,
  /* ObjectID */MongoDB.ObjectID,
  /* Make */MongoDB.Make,
  /* AsyncHandler */AsyncHandler,
  Mongo_004,
  Mongo_005,
  Mongo_006,
  /* Collection */Collection,
  /* MongoDb */MongoDb,
  /* connect */connect
];

var connection = Async.once(Curry._1(connect, "mongodb://127.0.0.1:27019/"));

var partial_arg = Curry._1(MongoDb[/* collection */0], "foo");

function collection(param) {
  return Async.map(partial_arg, connection, param);
}

Curry._1(Respect.Dsl[/* Async */12][/* register */3], Curry._2(Respect.Dsl[/* Async */12][/* describe */2], "Mongo", /* :: */[
          Curry._2(Respect.Dsl[/* Async */12][/* it */1], "has a failing test", (function () {
                  var partial_arg = Curry._1(Collection[/* insertOne */0], {
                        foo: "bar"
                      });
                  var partial_arg$1 = function (param) {
                    return Async.bind(partial_arg, collection, param);
                  };
                  var partial_arg$2 = function (param) {
                    return Async.map((function (prim) {
                                  return prim.insertedId;
                                }), partial_arg$1, param);
                  };
                  var partial_arg$3 = function (param) {
                    return Async.bind((function (id) {
                                  var partial_arg = Curry._1(Collection[/* findOne */1], {
                                        _id: id
                                      });
                                  return (function (param) {
                                      return Async.bind(partial_arg, collection, param);
                                    });
                                }), partial_arg$2, param);
                  };
                  var partial_arg$4 = function (param) {
                    return Async.map((function (doc) {
                                  if (doc !== null) {
                                    return doc.foo;
                                  } else {
                                    return "";
                                  }
                                }), partial_arg$3, param);
                  };
                  return (function (param) {
                      return Respect_matcher.shoulda((function (param, param$1) {
                                    return Respect_matcher.$great$eq$great(asyncResolve, (function (param) {
                                                  return Respect_matcher.equal("bar", param);
                                                }), param, param$1);
                                  }), partial_arg$4, param);
                    });
                })),
          /* [] */0
        ]));

exports.asyncResolve = asyncResolve;
exports.Mongo        = Mongo;
exports.connection   = connection;
exports.collection   = collection;
/* include Not a pure module */
